package main;
import java.util.Arrays;
import java.util.Collections;

class Solution {
    private int N, answer;
    
    public void DFS(int distIdx, int[] weak, int[] dist, int[] visited){
        //끝까지 다 갔는지 확인
        if(distIdx >= dist.length){
            //모든 weak 다 돌았는지는 한 사람 쓸 때마다 체크할거임
            return;
        }        
        
        //노예 하나가 돌기 시작하는 점 -> weak 위의 한 점이 베스트
        for(int i=0;i<weak.length;i++){
            int src = weak[i];
            int dest = weak[i]+dist[distIdx];

            //정방향
            //weak가 오름차순이므로 입출력 예 1 기준 n=10 -> n=1의 dest를 1로 바꿔서 할 필요는 없을듯
            for(int j = src; j<=dest ; j++){
                visited[j]++;
            }

            //모든 weak이 들어갔는지 확인
            boolean allIn=true;
            for(int j=0;j<weak.length;j++){
                if(visited[weak[j]] == 0){
                    allIn=false;
                    break;
                }
            }
            if(allIn){
                answer = (answer > distIdx) ? distIdx : answer;
            }
            DFS(distIdx+1, weak, dist, visited);
            
            for(int j = src; j<=dest ; j++){
                visited[j]--;
            }
            //역방향
            dest=weak[i]-dist[distIdx];
            if(dest < 0){
                dest+=N;
            }
            
            for(int j=0;j<dist[distIdx];j++){
                int idx=weak[i]-j;
                if(idx < 0){
                    idx+=N;
                }
                visited[idx]++;
            }
            allIn=true;
            for(int j=0;j<weak.length;j++){
                if(visited[weak[j]] == 0){
                    allIn=false;
                    break;
                }
            }
            if(allIn){
                answer = (answer > distIdx) ? distIdx : answer;
            }
            
            DFS(distIdx+1, weak, dist, visited);
            
            for(int j=0;j<dist[distIdx];j++){
                int idx=weak[i]-j;
                if(idx < 0){
                    idx+=N;
                }
                visited[idx]--;
            }
        }
    }
    
    public int solution(int n, int[] weak, int[] dist) {
        this.N=n;
        this.answer=dist.length+1;
        Integer[] temp = Arrays.stream(dist).boxed().toArray(Integer[]::new); 
        Arrays.sort(temp, Collections.reverseOrder());      
        dist = Arrays.stream(temp).mapToInt(Integer::intValue).toArray();
        
        int[] visited=new int[200];
        
        DFS(0, weak, dist, visited);
        
        if(answer == dist.length+1){
            answer=-1;
        }
        return this.answer;
    }
}